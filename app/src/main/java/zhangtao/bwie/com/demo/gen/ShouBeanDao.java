package zhangtao.bwie.com.demo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import Bean.ShouBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOU_BEAN".
*/
public class ShouBeanDao extends AbstractDao<ShouBean, Long> {

    public static final String TABLENAME = "SHOU_BEAN";

    /**
     * Properties of entity ShouBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sid = new Property(0, Long.class, "sid", true, "_id");
        public final static Property Shou_title = new Property(1, String.class, "shou_title", false, "SHOU_TITLE");
        public final static Property Shou_icon = new Property(2, String.class, "shou_icon", false, "SHOU_ICON");
        public final static Property Shou_dataId = new Property(3, String.class, "shou_dataId", false, "SHOU_DATA_ID");
    };


    public ShouBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShouBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOU_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sid
                "\"SHOU_TITLE\" TEXT," + // 1: shou_title
                "\"SHOU_ICON\" TEXT," + // 2: shou_icon
                "\"SHOU_DATA_ID\" TEXT);"); // 3: shou_dataId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOU_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShouBean entity) {
        stmt.clearBindings();
 
        Long sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(1, sid);
        }
 
        String shou_title = entity.getShou_title();
        if (shou_title != null) {
            stmt.bindString(2, shou_title);
        }
 
        String shou_icon = entity.getShou_icon();
        if (shou_icon != null) {
            stmt.bindString(3, shou_icon);
        }
 
        String shou_dataId = entity.getShou_dataId();
        if (shou_dataId != null) {
            stmt.bindString(4, shou_dataId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShouBean entity) {
        stmt.clearBindings();
 
        Long sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(1, sid);
        }
 
        String shou_title = entity.getShou_title();
        if (shou_title != null) {
            stmt.bindString(2, shou_title);
        }
 
        String shou_icon = entity.getShou_icon();
        if (shou_icon != null) {
            stmt.bindString(3, shou_icon);
        }
 
        String shou_dataId = entity.getShou_dataId();
        if (shou_dataId != null) {
            stmt.bindString(4, shou_dataId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShouBean readEntity(Cursor cursor, int offset) {
        ShouBean entity = new ShouBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shou_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shou_icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // shou_dataId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShouBean entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShou_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShou_icon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShou_dataId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShouBean entity, long rowId) {
        entity.setSid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShouBean entity) {
        if(entity != null) {
            return entity.getSid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
